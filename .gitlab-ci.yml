variables:
  IMAGE_REGISTRY_HOST: oliasoftacr.azurecr.io
  # Frontend
  APPLICATION_FRONTEND_NAME: intranet-frontend
  IMAGENAME_FRONTEND: oliasoft/$APPLICATION_FRONTEND_NAME
  FULLIMAGENAME_FRONTEND: $IMAGE_REGISTRY_HOST/$IMAGENAME_FRONTEND:$CI_COMMIT_SHA
  LATESTIMAGENAME_FRONTEND: $IMAGE_REGISTRY_HOST/$IMAGENAME_FRONTEND:latest
  # API
  APPLICATION_API_NAME: intranet-api
  IMAGENAME_API: oliasoft/$APPLICATION_API_NAME
  FULLIMAGENAME_API: $IMAGE_REGISTRY_HOST/$IMAGENAME_API:$CI_COMMIT_SHA
  LATESTIMAGENAME_API: $IMAGE_REGISTRY_HOST/$IMAGENAME_API:latest
  DOCKERFILE_PATH: CD
  MAINBRANCH: 'master'
  RELEASE_TOOLS_VERSION: 1.2.1
  # CI/CD required Variables
  # ACRPUSH_SERVICE_PRINCIPAL_ID
  # ACRPUSH_SERVICE_PRINCIPAL_PW
  # GITLAB_PUSH_TOKEN

default:
  tags:
    - oliasoft   # Only use our own private runner
    - kubernetes # Force it to run in kubernetes runner

stages:
#  - test
  - version
#  - dockerfilescan
#  - build
  - imagescan
  - deploytest
  - deployprod

cache:
  paths:
    - node_modules/
    - client-dist/

#
# **********************************************
# COMMON REUSABLE APPLICATION AGNOSTIC TEMPLATES
# **********************************************
#
.mr_rules:
  rules:
    # If the MR name is labeled by "Review" or has [review] in its title, we build automatically upon push to MR:
    - if: $CI_MERGE_REQUEST_ID && ($CI_MERGE_REQUEST_LABELS =~ /review\b/i || $CI_MERGE_REQUEST_TITLE =~ /\[review\]/i)
    # For other MRs, this is optional/manual:
    - if: $CI_MERGE_REQUEST_ID
      when: manual

release-version:
  image: oliasoftacr.azurecr.io/oliasoft/release-tools:$RELEASE_TOOLS_VERSION
  stage: version
  variables:
    GIT_STRATEGY: none
    KUBERNETES_MEMORY_REQUEST: 200Mi
    KUBERNETES_MEMORY_LIMIT: 600Mi
    OLIASOFT_RELEASE_TOOL_DIR: '../clone-dir'
    OLIASOFT_RELEASE_TOOL_PASSWORD: $GITLAB_PUSH_TOKEN
    OLIASOFT_RELEASE_TOOL_BRANCH: $MAINBRANCH
  script:
    - |
      release-tools clone \
        --repo="$CI_PROJECT_URL" \
        --branch="$MAINBRANCH" \
        --mkdir
    - |
      release-tools release-version \
        --branch="$MAINBRANCH" \
        --author="$CI_COMMIT_AUTHOR" \
        --email="$CI_COMMIT_AUTHOR" \
        --project-id="$CI_PROJECT_ID"
  rules:
    - if: $CI_COMMIT_BRANCH == $MAINBRANCH
      when: manual # Releasing is a manual task now
    - if: '$CI_COMMIT_TAG'  #Don't run version job again if we just tagged the commit (which happened in a previous GitLab pipeline)
      when: never

.build_container:
  stage: build
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  script:
    - echo "{\"auths\":{\"$IMAGE_REGISTRY_HOST\":{\"username\":\"$ACRPUSH_SERVICE_PRINCIPAL_ID\",\"password\":\"$ACRPUSH_SERVICE_PRINCIPAL_PW\"}}}" > /kaniko/.docker/config.json
    - echo "$CI_PROJECT_DIR/$DOCKERFILE_PATH/$DOCKERFILE"
    - >
      /kaniko/executor
      --cache
      --context $CI_PROJECT_DIR
      --dockerfile $CI_PROJECT_DIR/$DOCKERFILE_PATH/$DOCKERFILE
      --destination $FULLIMAGENAME
      --destination $LATESTIMAGENAME
      --destination $TAG
      --build-arg NPM_TOKEN=${CI_JOB_TOKEN}

trivy_config_scanning:
  stage: dockerfilescan
  image:
    name: oliasoftacr.azurecr.io/trivy:0.29.2 #Latest version
    entrypoint: [""]
  rules:
    - if: '$CI_COMMIT_BRANCH =~ /^release-v\d+.\d+/'  # Only trigger on branches starting with "release-vNNN.YYY" something
    - if: $CI_MERGE_REQUEST_ID
  script:
    - echo "Will start scanning Dockerfile in folder $DOCKERFILE_PATH"
    - trivy --version
    - trivy config --exit-code 1 $DOCKERFILE_PATH

.container_scanning:
  image:
    name: oliasoftacr.azurecr.io/trivy:0.29.2 #Latest version
    entrypoint: [""]
  stage: imagescan
  variables:
    GIT_STRATEGY: none
    TRIVY_AUTH_URL: "$IMAGE_REGISTRY_HOST"
  script:
    - echo "Will start scanning of $FULL_IMAGE_NAME"
    - trivy --version
    # update vulnerabilities db:
    - time trivy --cache-dir .trivycache/ image --download-db-only --no-progress
    # Builds report and puts it in the default workdir $CI_PROJECT_DIR, so `artifacts:` can take it from there
    - |
      time trivy --cache-dir .trivycache/ image \
        --exit-code 0 \
        --no-progress \
        --format template \
        --template "@/contrib/gitlab.tpl" \
        --output "$CI_PROJECT_DIR/gl-container-scanning-report.json" \
        "$FULL_IMAGE_NAME"
    # Prints full report
    - |
      time trivy --cache-dir .trivycache/ image \
        --exit-code 0 \
        --no-progress \
        "$FULL_IMAGE_NAME"
    # Fail on critical vulnerabilities only (but generated report above shows all):
    - |
      time trivy --cache-dir .trivycache/ image \
        --exit-code 1 \
        --severity CRITICAL \
        --no-progress \
        "$FULL_IMAGE_NAME"
  cache:
    paths:
      - .trivycache/
  # Enables https://docs.gitlab.com/ee/user/application_security/container_scanning/ (Container Scanning report is available on GitLab EE Ultimate or GitLab.com Gold)
  artifacts:
    when: always
    reports:
      container_scanning: gl-container-scanning-report.json

test:
  image: oliasoftacr.azurecr.io/node:18.7.0-alpine
  stage: test
  only:
    - merge_requests
  script:
    - echo '//gitlab.oliasoft.com/api/v4/packages/npm/:_authToken=${CI_JOB_TOKEN}' >> .npmrc
    - yarn install --progress=false --no-save
    - yarn generate:translation:json
    - yarn run depcruise
    - yarn run client:build
    - yarn run server:build
    - yarn run test

#
# **********************************************
# FRONTEND APPLICATION JOBS
# **********************************************
#
build_release:frontend:
  extends: .build_container
  rules:
    # Trigger on branches starting with "release-vNNN.YYY" something:
    - if: '$CI_COMMIT_BRANCH =~ /^release-v\d+.\d+/'
  before_script:
    - 'export APP_VERSION=$(sed -nE ''s/^\s*"version": "(.*?)",$/\1/p'' ./package.json)'
    - export DOCKERFILE="Dockerfile.Frontend"
    - export FULLIMAGENAME=$FULLIMAGENAME_FRONTEND
    - export LATESTIMAGENAME=$LATESTIMAGENAME_FRONTEND
    - echo $APP_VERSION
    - export TAG="$IMAGE_REGISTRY_HOST/$IMAGENAME_FRONTEND:$APP_VERSION"
    - export LATESTTAG=$LATESTIMAGENAME_FRONTEND

build_MR:frontend:
  extends:
    - .build_container
    - .mr_rules
  before_script:
    - export DOCKERFILE="Dockerfile.Frontend"
    - export FULLIMAGENAME=$FULLIMAGENAME_FRONTEND
    - export LATESTIMAGENAME=$LATESTIMAGENAME_FRONTEND
    - export TAG=$FULLIMAGENAME_FRONTEND
    - export LATESTTAG="$LATESTIMAGENAME_FRONTEND-mr-$CI_MERGE_REQUEST_IID"

container_scanning_MR:frontend:
  extends:
    - .container_scanning
    - .mr_rules
  before_script:
    - export FULL_IMAGE_NAME="$FULLIMAGENAME_FRONTEND" # Needs override here

container_scanning_release:frontend:
  extends: .container_scanning
  before_script:
    - export APP_VERSION=$(jq -r '.version' ./package.json)
    - echo $APP_VERSION
    - export FULL_IMAGE_NAME="$IMAGE_REGISTRY_HOST/$IMAGENAME_FRONTEND:$APP_VERSION" # Needs override here
  rules:
    - if: '$CI_COMMIT_BRANCH =~ /^release-v\d+.\d+/'  # Only trigger on branches starting with "release-vNNN.YYY" something

deploy_test:frontend:
  image: oliasoftacr.azurecr.io/oliasoft/release-tools:$RELEASE_TOOLS_VERSION
  stage: deploytest
  resource_group: deploytest:frontend
  before_script:
    - export APP_VERSION=$(jq -r '.version' ./package.json)
    - echo $APP_VERSION
  script:
    - |
      release-tools deploy \
        --dir='../gitops' \
        --mkdir \
        --repo='https://gitlab.oliasoft.com/oliasoft/gitops.git' \
        --password="$GITLAB_PUSH_TOKEN" \
        --branch='master' \
        --author="$CI_COMMIT_AUTHOR" \
        --email="$CI_COMMIT_AUTHOR" \
        --yaml-file-in-gitops="apps/$APPLICATION_FRONTEND_NAME/overlays/test/kustomization.yaml" \
        --imagetag="$APP_VERSION"
  rules:
    - if: '$CI_COMMIT_BRANCH =~ /^release-v\d+.\d+/'  # Only trigger on branches starting with "release-vNNN.YYY" something

deploy_prod:frontend:
  image: oliasoftacr.azurecr.io/oliasoft/release-tools:$RELEASE_TOOLS_VERSION
  stage: deployprod
  resource_group: deployprod:frontend
  before_script:
    - export APP_VERSION=$(jq -r '.version' ./package.json)
    - echo $APP_VERSION
  script:
    - |
      release-tools deploy \
        --dir='../gitops' \
        --mkdir \
        --repo='https://gitlab.oliasoft.com/oliasoft/gitops.git' \
        --password="$GITLAB_PUSH_TOKEN" \
        --branch='master' \
        --author="$CI_COMMIT_AUTHOR" \
        --email="$CI_COMMIT_AUTHOR" \
        --yaml-file-in-gitops="apps/$APPLICATION_FRONTEND_NAME/overlays/prod/kustomization.yaml" \
        --imagetag="$APP_VERSION"
  rules:
    - if: '$CI_COMMIT_BRANCH =~ /^release-v\d+.\d+/'  # Only trigger on branches starting with "release-vNNN.YYY" something
      when: manual

#
# **********************************************
# API APPLICATION JOBS
# **********************************************
#
build_release:api:
  extends: .build_container
  rules:
    # Trigger on branches starting with "release-vNNN.YYY" something:
    - if: '$CI_COMMIT_BRANCH =~ /^release-v\d+.\d+/'
  before_script:
    - 'export APP_VERSION=$(sed -nE ''s/^\s*"version": "(.*?)",$/\1/p'' ./package.json)'
    - export DOCKERFILE="Dockerfile.Api"
    - export FULLIMAGENAME=$FULLIMAGENAME_API
    - export LATESTIMAGENAME=$LATESTIMAGENAME_API
    - echo $APP_VERSION
    - export TAG="$IMAGE_REGISTRY_HOST/$IMAGENAME_API:$APP_VERSION"
    - export LATESTTAG=$LATESTIMAGENAME_API

build_MR:api:
  extends:
    - .build_container
    - .mr_rules
  before_script:
    - export DOCKERFILE="Dockerfile.Api"
    - export FULLIMAGENAME=$FULLIMAGENAME_API
    - export LATESTIMAGENAME=$LATESTIMAGENAME_API
    - export TAG=$FULLIMAGENAME_API
    - export LATESTTAG="$LATESTIMAGENAME_API-mr-$CI_MERGE_REQUEST_IID"

container_scanning_MR:api:
  extends:
    - .container_scanning
    - .mr_rules
  before_script:
    - export FULL_IMAGE_NAME="$FULLIMAGENAME_API" # Needs override here

container_scanning_release:api:
  extends: .container_scanning
  before_script:
    - export APP_VERSION=$(jq -r '.version' ./package.json)
    - echo $APP_VERSION
    - export FULL_IMAGE_NAME="$IMAGE_REGISTRY_HOST/$IMAGENAME_API:$APP_VERSION" # Needs override here
  rules:
    - if: '$CI_COMMIT_BRANCH =~ /^release-v\d+.\d+/'  # Only trigger on branches starting with "release-vNNN.YYY" something

deploy_test:api:
  image: oliasoftacr.azurecr.io/oliasoft/release-tools:$RELEASE_TOOLS_VERSION
  stage: deploytest
  resource_group: deploytest:api
  before_script:
    - export APP_VERSION=$(jq -r '.version' ./package.json)
    - echo $APP_VERSION
  script:
    - |
      release-tools deploy \
        --dir='../gitops' \
        --mkdir \
        --repo='https://gitlab.oliasoft.com/oliasoft/gitops.git' \
        --password="$GITLAB_PUSH_TOKEN" \
        --branch='master' \
        --author="$CI_COMMIT_AUTHOR" \
        --email="$CI_COMMIT_AUTHOR" \
        --yaml-file-in-gitops="apps/$APPLICATION_API_NAME/overlays/test/kustomization.yaml" \
        --imagetag="$APP_VERSION"
  rules:
    - if: '$CI_COMMIT_BRANCH =~ /^release-v\d+.\d+/'  # Only trigger on branches starting with "release-vNNN.YYY" something

deploy_prod:api:
  image: oliasoftacr.azurecr.io/oliasoft/release-tools:$RELEASE_TOOLS_VERSION
  stage: deployprod
  resource_group: deployprod:api
  before_script:
    - export APP_VERSION=$(jq -r '.version' ./package.json)
    - echo $APP_VERSION
  script:
    - |
      release-tools deploy \
        --dir='../gitops' \
        --mkdir \
        --repo='https://gitlab.oliasoft.com/oliasoft/gitops.git' \
        --password="$GITLAB_PUSH_TOKEN" \
        --branch='master' \
        --author="$CI_COMMIT_AUTHOR" \
        --email="$CI_COMMIT_AUTHOR" \
        --yaml-file-in-gitops="apps/$APPLICATION_API_NAME/overlays/prod/kustomization.yaml" \
        --imagetag="$APP_VERSION"
  rules:
    - if: '$CI_COMMIT_BRANCH =~ /^release-v\d+.\d+/'  # Only trigger on branches starting with "release-vNNN.YYY" something
      when: manual